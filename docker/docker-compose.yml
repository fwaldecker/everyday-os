# Supabase services
include:
  - ../supabase/docker/docker-compose.yml

volumes:
  n8n_storage:
  qdrant_storage:
  open-webui:
  flowise:
  caddy-data:
  caddy-config:
  searxng_data:
  searxng_secret:
  searxng_logs:
  valkey-data:
  langfuse_postgres_data:
  langfuse_clickhouse_data:
  langfuse_clickhouse_logs:
  langfuse_minio_data:
  minio_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  nca_data:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  restart: unless-stopped
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=postgres
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - N8N_HOST=0.0.0.0
    - N8N_PORT=5678
    - N8N_PROTOCOL=http
    - N8N_WEBHOOK_URL=${PROTOCOL}://n8n.${BASE_DOMAIN}
    - N8N_EDITOR_BASE_URL=${PROTOCOL}://n8n.${BASE_DOMAIN}
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 60s
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"



services:
  # Flowise service commented out as per requirements
  # flowise:
  #   image: flowiseai/flowise
  #   restart: unless-stopped
  #   container_name: flowise
  #   expose:
  #     - 3001/tcp
  #   environment:
  #       - PORT=3001
  #       - FLOWISE_USERNAME=${FLOWISE_USERNAME}
  #       - FLOWISE_PASSWORD=${FLOWISE_PASSWORD}
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   volumes:
  #       - ~/.flowise:/root/.flowise
  #   entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    restart: unless-stopped
    hostname: open-webui
    
    # Network configuration
    expose:
      - 8080/tcp
    extra_hosts:
      - "host.docker.internal:host-gateway"
    
    # Environment variables
    environment:
      - NODE_ENV=production
      - PORT=8080
      - HOST=0.0.0.0
      - OPENAI_API_BASE_URL=${OPENAI_API_BASE_URL:-https://api.openai.com/v1}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # - OLLAMA_API_BASE_URL=${OLLAMA_API_BASE_URL:-http://ollama:11434}  # Commented out - no local Ollama service
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-your-secret-key-change-me}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-change-me}
      - SESSION_SECRET=${SESSION_SECRET:-your-session-secret-change-me}
      - DATABASE_URL=file:/app/backend/data/db.sqlite
      - STORAGE_DIR=/app/backend/data
      - LOG_LEVEL=info
      - DISABLE_SIGNUP=${DISABLE_SIGNUP:-false}
      - REQUIRE_API_KEY=${REQUIRE_API_KEY:-true}
      - RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
      - RATE_LIMIT_MAX_REQUESTS=100
    
    # Volumes for persistent data
    volumes:
      - open-webui:/app/backend/data
      - ./docker/open-webui/config:/app/backend/config
      - ./docker/open-webui/logs:/app/backend/logs
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          memory: 1G
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "open-webui"

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials.json && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    expose:
      - 5678/tcp
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    restart: unless-stopped
    expose:
      - 6333/tcp
      - 6334/tcp
    volumes:
      - qdrant_storage:/qdrant/storage

  neo4j:
    image: neo4j:5.18.0-community
    container_name: neo4j
    restart: unless-stopped
    hostname: neo4j
    environment:
      # Authentication
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      
      # Memory Configuration
      - NEO4J_dbms_memory_heap_initial__size=2G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_offheap_max__size=1G
      
      # Security
      - NEO4J_dbms_security_procedures_unrestricted=apoc.export.*,apoc.import.*,gds.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.export.*,apoc.import.*,gds.*
      - NEO4J_dbms_security_allow__csv__import__from__file__urls=true
      
      # APOC Configuration
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=[\"apoc\",\"graph-data-science\"]
      
      # Network
      - NEO4J_dbms_connector_bolt_listen__address=:7687
      - NEO4J_dbms_connector_http_listen__address=:7474
      - NEO4J_dbms_connector_https_listen__address=:7473
      
      # Performance
      - NEO4J_dbms_jvm_additional=-XX:+ExitOnOutOfMemoryError
      - NEO4J_dbms_logs_default_level=INFO
    
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - ./docker/neo4j/conf:/var/lib/neo4j/conf
      - ./docker/neo4j/ssl:/ssl
    
    ports:
      - "7474:7474"
      - "7473:7473"
      - "7687:7687"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          memory: 2G
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  caddy:
    image: caddy:2.8.4-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
    environment:
      - BASE_DOMAIN=${BASE_DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-"admin@${BASE_DOMAIN}"}
      - ACME_CA=${ACME_CA:-"https://acme-v02.api.letsencrypt.org/directory"}
      - ACME_DNS=${ACME_DNS:-""}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-"admin@${BASE_DOMAIN}"}
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://caddy:2019/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  minio:
    image: minio/minio:latest
    container_name: minio
    hostname: minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      # Authentication
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      
      # Server Configuration
      MINIO_SERVER_URL: http://minio:9000
      MINIO_BROWSER_REDIRECT_URL: ${PROTOCOL}://minio.${BASE_DOMAIN}
      MINIO_REGION: us-east-1
      
      # Performance Tuning
      MINIO_API_REQUESTS_DEADLINE: 5m
      MINIO_API_CORS_ALLOWED_ORIGINS: "*"
      
      # Logging
      MINIO_LOGGER_WEBHOOK_ENABLE: "on"
      MINIO_LOGGER_WEBHOOK_ENDPOINT: http://minio:9000
      
    volumes:
      - minio_data:/data
      - ./docker/minio/entrypoint.sh:/usr/bin/entrypoint.sh
      - ./docker/minio/healthcheck.sh:/usr/bin/healthcheck.sh
      
    healthcheck:
      test: ["CMD", "sh", "-c", "/usr/bin/healthcheck.sh"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 60s
      
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "minio"

  nca-toolkit:
    build:
      context: ./nca-toolkit
      dockerfile: Dockerfile
    container_name: nca-toolkit
    restart: unless-stopped
    expose:
      - 8010
    environment:
      # Server Configuration
      - NODE_ENV=production
      - PORT=8010
      - NODE_OPTIONS=--max-old-space-size=2048
      
      # MinIO Configuration
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_SECURE=false
      - MINIO_BUCKET=nca
      - MINIO_REGION=us-east-1
      
      # Application Configuration
      - NCA_HOST=0.0.0.0
      - NCA_PORT=8010
      - NCA_DEBUG=false
      - NCA_LOG_LEVEL=info
      - NCA_ALLOWED_HOSTS=nca-toolkit,${BASE_DOMAIN},nca.${BASE_DOMAIN}
      - NCA_CSRF_TRUSTED_ORIGINS=${PROTOCOL}://nca.${BASE_DOMAIN}
      - NCA_CORS_ORIGINS=${PROTOCOL}://nca.${BASE_DOMAIN}
      
      # Database Configuration (if needed)
      # - DB_HOST=postgres
      # - DB_PORT=5432
      # - DB_NAME=nca
      # - DB_USER=postgres
      # - DB_PASSWORD=${POSTGRES_PASSWORD}
      
    volumes:
      - nca_data:/app/data
      - ./shared:/app/shared
      - /tmp/nca:/tmp/nca
      
    depends_on:
      minio:
        condition: service_healthy
      # postgres:
      #   condition: service_healthy
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  langfuse-worker:
    image: langfuse/langfuse-worker:3
    container_name: langfuse-worker
    restart: unless-stopped
    depends_on: &langfuse-depends-on
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    environment: &langfuse-worker-env
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      SALT: ${LANGFUSE_SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}
      CLICKHOUSE_MIGRATION_URL: ${CLICKHOUSE_MIGRATION_URL:-clickhouse://clickhouse:9000}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-http://clickhouse:8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX:-events/}
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${LANGFUSE_S3_MEDIA_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION:-auto}
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: ${LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: ${LANGFUSE_S3_MEDIA_UPLOAD_PREFIX:-media/}
      LANGFUSE_S3_BATCH_EXPORT_ENABLED: ${LANGFUSE_S3_BATCH_EXPORT_ENABLED:-false}
      LANGFUSE_S3_BATCH_EXPORT_BUCKET: ${LANGFUSE_S3_BATCH_EXPORT_BUCKET:-langfuse}
      LANGFUSE_S3_BATCH_EXPORT_PREFIX: ${LANGFUSE_S3_BATCH_EXPORT_PREFIX:-exports/}
      LANGFUSE_S3_BATCH_EXPORT_REGION: ${LANGFUSE_S3_BATCH_EXPORT_REGION:-auto}
      LANGFUSE_S3_BATCH_EXPORT_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE: ${LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE:-true}
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ${LANGFUSE_INGESTION_QUEUE_DELAY_MS:-}
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ${LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS:-}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_AUTH: ${REDIS_AUTH}
      REDIS_TLS_ENABLED: ${REDIS_TLS_ENABLED:-false}
      REDIS_TLS_CA: ${REDIS_TLS_CA:-/certs/ca.crt}
      REDIS_TLS_CERT: ${REDIS_TLS_CERT:-/certs/redis.crt}
      REDIS_TLS_KEY: ${REDIS_TLS_KEY:-/certs/redis.key}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    expose:
     - 3030/tcp

  langfuse-web:
    image: langfuse/langfuse:3
    restart: always
    depends_on: *langfuse-depends-on
    expose:
      - 3000/tcp
    environment:
      <<: *langfuse-worker-env
      NEXTAUTH_URL: ${PROTOCOL}://langfuse.${BASE_DOMAIN}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-}

  clickhouse:
    image: clickhouse/clickhouse-server
    restart: always
    user: "101:101"
    expose:
      - 8123/tcp
      - 9000/tcp
      - 9009/tcp
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://clickhouse:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s


  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    expose:
      - 5432/tcp
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    expose:
      - 6379/tcp
    volumes:
      - valkey-data:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  searxng:
    container_name: searxng
    image: docker.io/searxng/searxng:latest
    restart: unless-stopped
    hostname: searxng
    
    # Network configuration
    expose:
      - 8080/tcp
    
    # Volumes for persistent data and configuration
    volumes:
      - searxng_data:/etc/searxng:rw
      - searxng_secret:/etc/searxng/secret:rw
      - searxng_logs:/var/log/searxng
      - ./docker/searxng/settings.yml:/etc/searxng/settings.yml:ro
    
    # Environment variables
    environment:
      - INSTANCE_NAME=SearXNG
      - BASE_URL=${PROTOCOL}://search.${BASE_DOMAIN}/
      - AUTOCOMPLETE=google
      - LANGUAGE=en-US
      - DEFAULT_LOCALE=en
      - ULTRA_SECRET_KEY=${SEARXNG_SECRET_KEY:-generate-a-secret-key-and-put-it-here}
      - SEARCH_USE_GOOGLE_IMAGES=1
      - SEARCH_USE_GOOGLE_MAPS=1
      - SEARCH_USE_GOOGLE_TRANSLATE=1
      - SAFESEARCH=0
      - SEARCH_ENGINE_BAN=duckduckgo,bing
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
      - UWSGI_PROCESSES=${SEARXNG_UWSGI_PROCESSES:-1}
      - UWSGI_RELOAD_ON_RSS=2048
      - UWSGI_CHEAPER=1
      - UWSGI_CHEAPER_ALGO=busyness
      - UWSGI_CHEAPER_OVERLOAD=10
      - UWSGI_CHEAPER_STEP=1
      - UWSGI_CHEAPER_BUSINESS_VERBOSE=true
      - UWSGI_CHEAPER_BUSINESS_MULTIPLIER=30
      - UWSGI_CHEAPER_BUSINESS_MIN=5
      - UWSGI_CHEAPER_BUSINESS_MAX=20
      - UWSGI_CHEAPER_BUSINESS_BACKLOG_ALERT=10
      - UWSGI_CHEAPER_BUSINESS_BACKLOG_STEP=1
    
    # Security
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    read_only: true
    security_opt:
      - no-new-privileges:true
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          memory: 1G
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "searxng"

