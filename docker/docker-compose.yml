volumes:
  n8n_storage:
  qdrant_storage:
  open-webui:
  caddy-data:
  caddy-config:
  valkey-data:
  postgres_data:
  minio_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  nca_data:
  mixpost_storage:
  mysql_data:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  restart: unless-stopped
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=postgres
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - N8N_PROTOCOL=https
    - N8N_WEBHOOK_URL=${PROTOCOL}://n8n.${BASE_DOMAIN}
    - N8N_EDITOR_BASE_URL=${PROTOCOL}://n8n.${BASE_DOMAIN}
    - WEBHOOK_URL=${PROTOCOL}://n8n.${BASE_DOMAIN}
    - N8N_MAX_UPLOAD_SIZE=5GB
    - N8N_PAYLOAD_SIZE_MAX=5120  # 5GB in MB
    - N8N_TIMEOUT=7200000  # 2 hours
    - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
    - TMPDIR=/data/tmp
    - N8N_RUNNERS_ENABLED=true
    # SMTP Configuration (optional)
    - N8N_SMTP_HOST=${N8N_SMTP_HOST:-}
    - N8N_SMTP_PORT=${N8N_SMTP_PORT:-}
    - N8N_SMTP_USER=${N8N_SMTP_USER:-}
    - N8N_SMTP_PASS=${N8N_SMTP_PASS:-}
    - N8N_SMTP_SENDER=${N8N_SMTP_SENDER:-}
    - N8N_SMTP_SSL=${N8N_SMTP_SSL:-false}
  healthcheck:
    test: ["CMD", "wget", "-q", "-O-", "http://localhost:5678/healthz"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 60s
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

services:

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    restart: unless-stopped
    hostname: open-webui
    
    # Network configuration
    expose:
      - 8080/tcp
    extra_hosts:
      - "host.docker.internal:host-gateway"
    
    # Environment variables
    environment:
      - NODE_ENV=production
      - PORT=8080
      - HOST=0.0.0.0
      - OPENAI_API_BASE_URL=${OPENAI_API_BASE_URL:-https://api.openai.com/v1}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # - OLLAMA_API_BASE_URL=${OLLAMA_API_BASE_URL:-http://ollama:11434}  # Commented out - no local Ollama service
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-your-secret-key-change-me}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-change-me}
      - SESSION_SECRET=${SESSION_SECRET:-your-session-secret-change-me}
      # Use SQLite for now due to PostgreSQL connection bug
      # - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/openwebui
      - STORAGE_DIR=/data/storage
      - LOG_LEVEL=info
      - DISABLE_SIGNUP=${DISABLE_SIGNUP:-false}
      - REQUIRE_API_KEY=${REQUIRE_API_KEY:-true}
      - RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
      - RATE_LIMIT_MAX_REQUESTS=100
      # Add PostgreSQL connection details
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=openwebui
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    
    # Volumes for persistent data
    volumes:
      - open-webui:/app/backend/data
      - ./docker/open-webui/config:/app/backend/config
      - ./docker/open-webui/logs:/app/backend/logs
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          memory: 1G
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "open-webui"

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    profiles: ["import"]
    entrypoint: /bin/sh
    command:
      - "-c"
      - |
        if [ ! -f /home/node/.n8n/.workflows-imported ]; then
          echo "Importing workflows for first-time setup..."
          n8n import:workflow --separate --input=/workflows
          touch /home/node/.n8n/.workflows-imported
          echo "Workflow import completed successfully!"
        else
          echo "Workflows already imported, skipping..."
        fi
    volumes:
      - n8n_storage:/home/node/.n8n
      - ../n8n-workflows:/workflows:ro
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    expose:
      - 5678/tcp
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 8G
        reservations:
          cpus: '0.5'
          memory: 1G
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./shared:/data/shared
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 2G
    depends_on:
      postgres:
        condition: service_healthy

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    restart: unless-stopped
    expose:
      - 6333/tcp
      - 6334/tcp
    volumes:
      - qdrant_storage:/qdrant/storage

  neo4j:
    image: neo4j:5.18.0-community
    container_name: neo4j
    restart: unless-stopped
    hostname: neo4j
    environment:
      # Authentication
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      
      # Memory Configuration
      - NEO4J_server_memory_heap_initial__size=2G
      - NEO4J_server_memory_heap_max__size=2G
      - NEO4J_server_memory_pagecache_size=1G
      
      # Security
      - NEO4J_dbms_security_procedures_unrestricted=apoc.export.*,apoc.import.*,gds.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.export.*,apoc.import.*,gds.*
      - NEO4J_dbms_security_allow__csv__import__from__file__urls=true
      
      # APOC Configuration
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=[\"apoc\",\"graph-data-science\"]
      
      # Network
      - NEO4J_server_bolt_listen__address=:7687
      - NEO4J_server_http_listen__address=:7474
      - NEO4J_server_https_listen__address=:7473
      
      # Performance
      - NEO4J_server_jvm_additional=-XX:+ExitOnOutOfMemoryError
    
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - ./docker/neo4j/ssl:/ssl
    
    # Ports are not exposed directly for security
    # Access Neo4j through Caddy reverse proxy at neo4j.${BASE_DOMAIN}
    expose:
      - 7474
      - 7473
      - 7687
    
    healthcheck:
      test: ["CMD", "wget", "-q", "-O-", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          memory: 2G
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  caddy:
    image: caddy:2.8.4-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
    environment:
      - BASE_DOMAIN=${BASE_DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-"admin@${BASE_DOMAIN}"}
      - ACME_CA=${ACME_CA:-"https://acme-v02.api.letsencrypt.org/directory"}
      - ACME_DNS=${ACME_DNS:-""}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-"admin@${BASE_DOMAIN}"}
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    # Health check removed - admin API doesn't have /health endpoint
    # healthcheck:
    #   test: ["CMD", "wget", "--spider", "http://caddy:2019/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s

  minio:
    image: minio/minio:latest
    container_name: minio
    hostname: minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      # Authentication
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      
      # Server Configuration
      MINIO_SERVER_URL: http://minio:9000
      MINIO_BROWSER_REDIRECT_URL: ${PROTOCOL}://minio.${BASE_DOMAIN}
      MINIO_REGION: us-east-1
      
      # Performance Tuning
      MINIO_API_REQUESTS_DEADLINE: 5m
      MINIO_API_CORS_ALLOWED_ORIGINS: "*"
      
      # Logging
      MINIO_LOGGER_WEBHOOK_ENABLE: "on"
      MINIO_LOGGER_WEBHOOK_ENDPOINT: http://minio:9000
      
    volumes:
      - minio_data:/data
      - ./docker/minio/entrypoint.sh:/usr/bin/entrypoint.sh
      - ./docker/minio/healthcheck.sh:/usr/bin/healthcheck.sh
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 60s
      
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "minio"

  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    profiles: ["init"]
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./minio-init.sh:/init.sh:ro
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    entrypoint: /bin/bash
    command: /init.sh

  nca-toolkit:
    build:
      context: ./nca-toolkit
      dockerfile: Dockerfile
    container_name: nca-toolkit
    restart: unless-stopped
    expose:
      - 8080
    environment:
      # Server Configuration
      - NODE_ENV=production
      - PORT=8080
      - NODE_OPTIONS=--max-old-space-size=2048
      
      # API Keys
      - API_KEY=${NCA_API_KEY:-nca-toolkit-default-api-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      
      # S3 Storage Configuration (Official NCA Toolkit format)
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - S3_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - S3_REGION=us-east-1
      - S3_BUCKET_NAME=nca
      - S3_PUBLIC_URL=${PROTOCOL}://minio-api.${BASE_DOMAIN}
      
      # Application Configuration
      - NCA_HOST=0.0.0.0
      - NCA_PORT=8080
      - NCA_DEBUG=false
      
      # Worker Configuration
      - GUNICORN_WORKERS=1
      - NCA_LOG_LEVEL=info
      - NCA_ALLOWED_HOSTS=nca-toolkit,${BASE_DOMAIN},nca.${BASE_DOMAIN}
      - NCA_CSRF_TRUSTED_ORIGINS=${PROTOCOL}://nca.${BASE_DOMAIN}
      - NCA_CORS_ORIGINS=${PROTOCOL}://nca.${BASE_DOMAIN}
      
      # Database Configuration (if needed)
      # - DB_HOST=postgres
      # - DB_PORT=5432
      # - DB_NAME=nca
      # - DB_USER=postgres
      # - DB_PASSWORD=${POSTGRES_PASSWORD}
      
    volumes:
      - nca_data:/app/data
      - ./shared:/app/shared
      - /tmp/nca:/tmp/nca
      
    depends_on:
      minio:
        condition: service_healthy
      # postgres:
      #   condition: service_healthy
      
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; req = urllib.request.Request('http://localhost:8080/v1/toolkit/authenticate', headers={'X-API-Key': '${NCA_API_KEY:-nca-toolkit-default-api-key}'}); urllib.request.urlopen(req)\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"


  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    expose:
      - 5432/tcp
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    expose:
      - 6379/tcp
    volumes:
      - valkey-data:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  mysql:
    image: mysql/mysql-server:8.0
    container_name: mixpost-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-MixPostMySQL2025!}
      - MYSQL_DATABASE=mixpost
      - MYSQL_USER=mixpost
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-MixPostDB2025!}
    volumes:
      - mysql_data:/var/lib/mysql
    expose:
      - 3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mixpost:
    image: inovector/mixpost-pro-team:latest
    container_name: mixpost
    restart: unless-stopped
    ports:
      - "9000:80"
    environment:
      # License
      - LICENSE_KEY=yoeya4oEyrmiEEDKZGr2RtMTJVQJhBkpaPuT8EXAL1NOsZVUEFrUMzSxt5Vy7i1J
      
      # Application
      - APP_NAME=Mixpost
      - APP_KEY=base64:mSkK0ldNzh0XYDc0QiCkEGDcvbTTVbIfY3m3UssGvAU=
      - APP_URL=https://social.everydaycreator.org
      - APP_DOMAIN=social.everydaycreator.org
      - SESSION_DOMAIN=.everydaycreator.org
      - SSL_EMAIL=${LETSENCRYPT_EMAIL:-admin@everydaycreator.org}
      
      # Database
      - DB_DATABASE=mixpost
      - DB_USERNAME=mixpost
      - DB_PASSWORD=${MYSQL_PASSWORD:-MixPostDB2025!}
      
      # Mail (optional, using n8n settings if available)
      - MAIL_MAILER=${N8N_SMTP_HOST:+smtp}
      - MAIL_HOST=${N8N_SMTP_HOST:-localhost}
      - MAIL_PORT=${N8N_SMTP_PORT:-587}
      - MAIL_USERNAME=${N8N_SMTP_USER:-}
      - MAIL_PASSWORD=${N8N_SMTP_PASS:-}
      - MAIL_ENCRYPTION=${N8N_SMTP_SSL:-tls}
      - MAIL_FROM_ADDRESS=${N8N_SMTP_SENDER:-noreply@everydaycreator.org}
      - MAIL_FROM_NAME=Mixpost
      
      # Pages configuration
      - MIXPOST_PUBLIC_PAGES_PREFIX=
      
    volumes:
      - mixpost_storage:/var/www/html/storage/app
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy


