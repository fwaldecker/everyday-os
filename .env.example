#############################################
# Everyday-OS Environment Configuration
#############################################
#
# This is a template configuration file. Copy it to .env and update the values.
# All variables marked as [required] must be set for the application to work properly.
# Generate secure secrets using: openssl rand -hex 32


#############################################
# [required] Base Configuration
#############################################
# The base domain for all services (e.g., example.com or subdomain.yourdomain.com)
# All services will be available as subdomains of this domain
BASE_DOMAIN=example.com

# Protocol to use (http or https)
# In production, always use https with a valid SSL certificate
PROTOCOL=https

# Server public IP address (for DNS records and SSL certificates)
# This should be the public IP address of your server
SERVER_IP=your.server.ip.address

# Timezone for all services (default: UTC)
# Format: Continent/City (e.g., America/Chicago, Europe/London)
TZ=UTC

# Default language (used by various services)
LANG=en_US.UTF-8

#############################################
# [required] n8n Workflow Automation
#############################################
#
# n8n is a workflow automation tool that connects all your services together.
# Documentation: https://docs.n8n.io/

# Security settings (generate new secrets for production)
# Generate with: openssl rand -hex 32
N8N_ENCRYPTION_KEY=super-secret-key-change-me
N8N_USER_MANAGEMENT_JWT_SECRET=another-secret-key-change-me

# Server configuration
N8N_HOST=n8n.${BASE_DOMAIN}
N8N_PORT=5678
N8N_PROTOCOL=${PROTOCOL}
N8N_EDITOR_BASE_URL=${PROTOCOL}://n8n.${BASE_DOMAIN}/

# Environment (development or production)
# In production, additional security measures are enabled
N8N_ENVIRONMENT=development

# Webhook configuration
# Must use HTTPS in production for security
N8N_WEBHOOK_URL=${PROTOCOL}://n8n.${BASE_DOMAIN}/
N8N_DISABLE_PRODUCTION_MAIN_PROCESS=false
N8N_DISABLE_STATISTICS=true

# Database configuration (PostgreSQL)
DB_POSTGRESDB_DATABASE=n8n
DB_POSTGRESDB_HOST=postgres
DB_POSTGRESDB_PORT=5432
DB_POSTGRESDB_USER=postgres
DB_POSTGRESDB_PASSWORD=your-secure-n8n-db-password

# Optional: External database connection
# Uncomment and configure if using an external database
# DB_TYPE=postgresdb
# DB_POSTGRESDB_HOST=your-db-host
# DB_POSTGRESDB_PORT=5432
# DB_POSTGRESDB_DATABASE=n8n
# DB_POSTGRESDB_USER=db-user
# DB_POSTGRESDB_PASSWORD=db-password
# DB_POSTGRESDB_SSL_CA=/path/to/ca.pem
# DB_POSTGRESDB_SSL_CERT=/path/to/cert.pem
# DB_POSTGRESDB_SSL_KEY=/path/to/key.pem

# Optional: Redis for queue and cache
# N8N_REDIS_HOST=redis
# N8N_REDIS_PORT=6379
# N8N_REDIS_PASSWORD=your-redis-password
# N8N_QUEUE_BULL_REDIS_HOST=redis
# N8N_QUEUE_BULL_REDIS_PORT=6379
# N8N_QUEUE_BULL_REDIS_PASSWORD=your-redis-password

# Optional: External storage for workflow files
# N8N_USER_FOLDER=/data/n8n
# N8N_DIAGNOSTICS_ENABLED=false
# N8N_PAYLOAD_SIZE_MAX=16

#############################################
# [required] MinIO Object Storage
#############################################
#
# MinIO is an S3-compatible object storage service.
# Documentation: https://min.io/docs/

# Admin credentials (CHANGE THESE IN PRODUCTION!)
# Generate with: openssl rand -hex 16
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=change-this-password

# Server configuration
MINIO_BROWSER_REDIRECT_URL=${PROTOCOL}://minio.${BASE_DOMAIN}
MINIO_SERVER_URL=http://minio:9000
MINIO_CONSOLE_ADDRESS=:9001

# Storage configuration
MINIO_VOLUMES="/data"
MINIO_ROOT_USER_FILE="/run/secrets/minio_root_user"
MINIO_ROOT_PASSWORD_FILE="/run/secrets/minio_root_password"

# Bucket names (will be created automatically if they don't exist)
MINIO_NCA_BUCKET=nca
MINIO_LANGFUSE_BUCKET=langfuse
MINIO_BACKUP_BUCKET=backups

# Security settings
MINIO_IDENTITY_OPENID_CONFIG_URL=""
MINIO_POLICY_LABEL=""
MINIO_WORM=off
MINIO_COMPRESS=true
MINIO_COMPRESS_EXTENSIONS=".txt,.log,.json,.csv"
MINIO_COMPRESS_MIMETYPES="text/plain,application/json,text/csv"

# CORS settings (adjust as needed)
MINIO_CORS_ALLOW_ORIGIN="*"
MINIO_CORS_ALLOW_METHODS="GET,POST,PUT,DELETE,HEAD,OPTIONS"
MINIO_CORS_ALLOW_HEADERS="*"
MINIO_CORS_EXPOSE_HEADERS="*"
MINIO_CORS_MAX_AGE=3600

# Cache settings
MINIO_CACHE_RANGE_READER=true
MINIO_CACHE_EXCLUDE=""
MINIO_CACHE_EXPIRE=90
MINIO_CACHE_MAXUSE=80
MINIO_CACHE_QUOTA=90

# Logging
MINIO_LOGGER_WEBHOOK_ENABLE=off
MINIO_LOGGER_WEBHOOK_ENDPOINT=""
MINIO_LOGGER_WEBHOOK_AUTH_TOKEN=""
MINIO_LOGGER_WEBHOOK_CLIENT_CERT=""
MINIO_LOGGER_WEBHOOK_CLIENT_KEY=""

# Notification targets (configure as needed)
# MINIO_NOTIFY_WEBHOOK_ENABLE=off
# MINIO_NOTIFY_WEBHOOK_ENDPOINT=""
# MINIO_NOTIFY_WEBHOOK_AUTH_TOKEN=""
# MINIO_NOTIFY_WEBHOOK_QUEUE_DIR=""
# MINIO_NOTIFY_WEBHOOK_QUEUE_LIMIT=10000

# Health check configuration
MINIO_HEALTHCHECK_ENABLED=true
MINIO_HEALTHCHECK_DRIVE_ENABLED=true
MINIO_HEALTHCHECK_DRIVE_INTERVAL=60s
MINIO_HEALTHCHECK_DRIVE_THRESHOLD=3

#############################################
# [required] NCA Toolkit Configuration
#############################################
#
# NCA Toolkit provides additional functionality for the Everyday-OS platform.

# Server configuration
NCA_PORT=8010
NCA_HOST=0.0.0.0
NCA_WORKERS=4
NCA_THREADS=2
NCA_TIMEOUT=120
NCA_KEEPALIVE=5

# Security settings
NCA_DEBUG=false
NCA_LOG_LEVEL=INFO
NCA_SECRET_KEY=generate-a-secure-secret-key-here
NCA_ALLOWED_HOSTS=${BASE_DOMAIN},nca.${BASE_DOMAIN},nca-toolkit,localhost,127.0.0.1
NCA_CSRF_TRUSTED_ORIGINS=${PROTOCOL}://nca.${BASE_DOMAIN}

# Database configuration (if applicable)
# NCA_DB_ENGINE=django.db.backends.postgresql
# NCA_DB_NAME=nca
# NCA_DB_USER=postgres
# NCA_DB_PASSWORD=your-db-password
# NCA_DB_HOST=postgres
# NCA_DB_PORT=5432

# Cache configuration
# NCA_CACHE_BACKEND=django_redis.cache.RedisCache
# NCA_CACHE_LOCATION=redis://redis:6379/1

# Email settings (for notifications)
# NCA_EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
# NCA_EMAIL_HOST=smtp.example.com
# NCA_EMAIL_PORT=587
# NCA_EMAIL_USE_TLS=true
# NCA_EMAIL_HOST_USER=your-email@example.com
# NCA_EMAIL_HOST_PASSWORD=your-email-password
# NCA_DEFAULT_FROM_EMAIL=noreply@${BASE_DOMAIN}

# File storage (defaults to local filesystem)
# NCA_STORAGE_BACKEND=storages.backends.s3boto3.S3Boto3Storage
# NCA_AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
# NCA_AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
# NCA_AWS_STORAGE_BUCKET_NAME=${MINIO_NCA_BUCKET}
# NCA_AWS_S3_ENDPOINT_URL=http://minio:9000
# NCA_AWS_S3_USE_SSL=false
# NCA_AWS_S3_VERIFY=false

# Authentication (if applicable)
# NCA_AUTH_BACKEND=django.contrib.auth.backends.ModelBackend
# NCA_LOGIN_URL=/accounts/login/
# NCA_LOGIN_REDIRECT_URL=/
# NCA_LOGOUT_REDIRECT_URL=/

# Security headers (recommended for production)
NCA_SECURE_HSTS_SECONDS=31536000  # 1 year
NCA_SECURE_CONTENT_TYPE_NOSNIFF=True
NCA_SECURE_BROWSER_XSS_FILTER=True
NCA_X_FRAME_OPTIONS=DENY
NCA_SECURE_SSL_REDIRECT=True
NCA_SESSION_COOKIE_SECURE=True
NCA_CSRF_COOKIE_SECURE=True

# Logging configuration
NCA_LOGGING_LEVEL=INFO
NCA_LOGGING_FILE=/var/log/nca/nca.log
NCA_LOGGING_MAX_BYTES=10485760  # 10MB
NCA_LOGGING_BACKUP_COUNT=10


#############################################
# [required] Supabase Configuration
#############################################
#
# Supabase is an open source Firebase alternative providing authentication,
# database, and storage capabilities.
# Documentation: https://supabase.com/docs

# Security (GENERATE THESE FOR PRODUCTION!)
# Generate with: openssl rand -base64 32
POSTGRES_PASSWORD=your-super-secret-and-long-postgres-password
JWT_SECRET=your-super-secret-jwt-token-with-at-least-32-characters-long

# API Keys (generate your own for production)
# These are example keys - generate new ones for production
ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE

SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q

# Dashboard credentials (CHANGE THESE!)
DASHBOARD_USERNAME=supabase-admin
DASHBOARD_PASSWORD=change-this-to-a-strong-password

# Server configuration
SITE_URL=${PROTOCOL}://supabase.${BASE_DOMAIN}
REST_URL=${PROTOCOL}://supabase.${BASE_DOMAIN}/rest/v1
GRAPHQL_URL=${PROTOCOL}://supabase.${BASE_DOMAIN}/graphql/v1

# Database configuration
DB_HOST=db
DB_PORT=5432
DB_NAME=postgres
DB_USER=postgres
DB_PASSWORD=${POSTGRES_PASSWORD}

# Connection pooling
POOLER_TENANT_ID=everyday-os-tenant
POOLER_DB_POOL_SIZE=5
POOLER_DB_MAX_CLIENTS=100
POOLER_DB_DEFAULT_POOL_SIZE=20

# Storage configuration (using MinIO as S3-compatible storage)
STORAGE_S3_ACCESS_KEY_ID=${MINIO_ROOT_USER}
STORAGE_S3_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
STORAGE_S3_BUCKET=supabase-storage
STORAGE_S3_REGION=us-east-1
STORAGE_S3_ENDPOINT=http://minio:9000
STORAGE_S3_FORCE_PATH_STYLE=true

# Authentication
GOTRUE_JWT_ADMIN_ROLES=service_role
GOTRUE_JWT_AUD=authenticated
GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
GOTRUE_JWT_EXP=3600
GOTRUE_JWT_ISSUER=supabase
GOTRUE_JWT_SECRET=${JWT_SECRET}

# Email configuration (for auth emails)
# GOTRUE_SMTP_HOST=smtp.example.com
# GOTRUE_SMTP_PORT=587
# GOTRUE_SMTP_USER=your-email@example.com
# GOTRUE_SMTP_PASS=your-email-password
# GOTRUE_SMTP_ADMIN_EMAIL=noreply@${BASE_DOMAIN}
# GOTRUE_SMTP_SENDER_NAME=Supabase
# GOTRUE_SMTP_MAX_FREQUENCY=1s

# Rate limiting
RATE_LIMIT_HEADER=1
RATE_LIMIT_ENABLED=true
RATE_LIMIT_TOKEN=100
RATE_LIMIT_ANONYMOUS=60
RATE_LIMIT_EMAIL_SENT=2
RATE_LIMIT_SMS_SENT=2

# CORS configuration
# GOTRUE_CORS_ALLOWED_ORIGINS=${PROTOCOL}://app.${BASE_DOMAIN},${PROTOCOL}://${BASE_DOMAIN}
# GOTRUE_CORS_ALLOWED_METHODS=GET, POST, PUT, DELETE, OPTIONS
# GOTRUE_CORS_ALLOWED_HEADERS=Authorization, Content-Type
# GOTRUE_CORS_ALLOW_CREDENTIALS=true

# Logging
LOG_LEVEL=info
LOG_FORMAT=text
LOG_NO_COLOR=false

# Monitoring and telemetry
# Set to false to disable telemetry
ENABLE_TELEMETRY=true

# Webhooks (for real-time updates)
# ENABLE_WEBHOOKS=true
# WEBHOOK_SECRET=your-webhook-secret
# WEBHOOK_RETRY_ATTEMPTS=3
# WEBHOOK_RETRY_INTERVAL=1s
# WEBHOOK_TIMEOUT=5s

# Backup configuration
# BACKUP_SCHEDULE=0 0 * * *
# BACKUP_RETENTION=30d
# BACKUP_ENCRYPTION_KEY=your-encryption-key

#############################################
# [required] Neo4j Configuration
#############################################
# Format: username/password
NEO4J_AUTH=neo4j/your-neo4j-password

# Neo4j password (used separately in some configurations)
NEO4J_PASSWORD=your-neo4j-password

# Neo4j connection details
NEO4J_URI=bolt://neo4j:7687
NEO4J_DATABASE=neo4j

# Memory settings (adjust based on your system)
NEO4J_dbms_memory_heap_initial__size=512m
NEO4J_dbms_memory_heap_max__size=1g
NEO4J_dbms_memory_pagecache_size=512m

#############################################
# [required] Langfuse Configuration
#############################################
# Generate these secrets using: openssl rand -hex 32
LANGFUSE_SECRET_KEY=your-langfuse-secret-key
NEXTAUTH_SECRET=your-nextauth-secret
NEXTAUTH_URL=${PROTOCOL}://langfuse.${BASE_DOMAIN}

# Database connection
DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/langfuse

# S3 storage for Langfuse (using MinIO)
S3_ACCESS_KEY_ID=${MINIO_ROOT_USER}
S3_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
S3_ENDPOINT=http://minio:9000
S3_BUCKET_NAME=langfuse
S3_REGION=us-east-1

# Encryption
ENCRYPTION_KEY=your-encryption-key

# Langfuse Public API Key (required for Langfuse worker)
LANGFUSE_PUBLIC_KEY=your-langfuse-public-key

# Authentication
SIGN_UP_ENABLED=true
NEXT_PUBLIC_LANGFUSE_CLOUD_DEPLOYMENT=false

CLICKHOUSE_PASSWORD=super-secret-key-1
CLICKHOUSE_USER=clickhouse  # Default user for ClickHouse
MINIO_ROOT_PASSWORD=super-secret-key-2
LANGFUSE_SALT=super-secret-key-3
NEXTAUTH_SECRET=super-secret-key-4
ENCRYPTION_KEY=generate-with-openssl # generate via `openssl rand -hex 32`

# Redis/Valkey Configuration
REDIS_AUTH=LOCALONLYREDIS  # Change this for production!

############
# [required for prod]
# Caddy Config

# Service URLs will use the configured domain names
# To change this for production:
# Uncomment all of these environment variables for the services you want exposed
# Note that you might not want to expose Ollama or SearXNG since they aren't secured by default
# Replace the placeholder value with the host for each service (like n8n.yourdomain.com)
# Replace internal by your email (require to create a Let's Encrypt certificate)
############

# N8N_HOSTNAME=n8n.yourdomain.com
# WEBUI_HOSTNAME=openwebui.yourdomain.com
# FLOWISE_HOSTNAME=flowise.yourdomain.com
# SUPABASE_HOSTNAME=supabase.yourdomain.com
# LANGFUSE_HOSTNAME=langfuse.yourdomain.com
# OLLAMA_HOSTNAME=ollama.yourdomain.com  # Not used - no local Ollama service
# SEARXNG_HOSTNAME=searxng.yourdomain.com
# NEO4J_HOSTNAME=neo4j.yourdomain.com
# NCA_HOSTNAME=nca.yourdomain.com
# MINIO_CONSOLE_HOSTNAME=minio-console.yourdomain.com
# MINIO_API_HOSTNAME=minio-api.yourdomain.com
# LETSENCRYPT_EMAIL=internal



# Everything below this point is optional.
# Default values will suffice unless you need more features/customization.

   #
   #
#######
 #####
   #

############
# Optional Google Authentication for Supabase
# Get these values from the Google Admin Console
############
# ENABLE_GOOGLE_SIGNUP=true
# GOOGLE_CLIENT_ID=
# GOOGLE_CLIENT_SECRET=
# GOOGLE_REDIRECT_URI=

############
# Optional SearXNG Config
# If you run a very small or a very large instance, you might want to change the amount of used uwsgi workers and threads per worker
# More workers (= processes) means that more search requests can be handled at the same time, but it also causes more resource usage
############

# SEARXNG_UWSGI_WORKERS=4
# SEARXNG_UWSGI_THREADS=4

############
# Database - You can change these to any PostgreSQL database that has logical replication enabled.
############

POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_PORT=5432
# default user is postgres
POSTGRES_USER=postgres

############
# Supavisor -- Database pooler and others that can be left as default values
############
POOLER_PROXY_PORT_TRANSACTION=6543
POOLER_DEFAULT_POOL_SIZE=20
POOLER_MAX_CLIENT_CONN=100
SECRET_KEY_BASE=UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq
VAULT_ENC_KEY=your-32-character-encryption-key
# Pool size for internal metadata storage used by Supavisor
# This is separate from client connections and used only by Supavisor itself
POOLER_DB_POOL_SIZE=5


############
# API Proxy - Configuration for the Kong Reverse proxy.
############

KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443


############
# API - Configuration for PostgREST.
############

PGRST_DB_SCHEMAS=public,storage,graphql_public

############
# Flowise - Authentication Configuration for Flowise.
############
#FLOWISE_USERNAME=your_username
#FLOWISE_PASSWORD=your_password


############
# Auth - Configuration for the GoTrue authentication server.
############

## General
SITE_URL=${PROTOCOL}://langfuse.${BASE_DOMAIN}
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=${PROTOCOL}://api.${BASE_DOMAIN}

## Mailer Config
MAILER_URLPATHS_CONFIRMATION="/auth/v1/verify"
MAILER_URLPATHS_INVITE="/auth/v1/verify"
MAILER_URLPATHS_RECOVERY="/auth/v1/verify"
MAILER_URLPATHS_EMAIL_CHANGE="/auth/v1/verify"

## Email auth
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=true
SMTP_ADMIN_EMAIL=admin@example.com
SMTP_HOST=supabase-mail
SMTP_PORT=2500
SMTP_USER=fake_mail_user
SMTP_PASS=fake_mail_password
SMTP_SENDER_NAME=fake_sender
ENABLE_ANONYMOUS_USERS=false

## Phone auth
ENABLE_PHONE_SIGNUP=true
ENABLE_PHONE_AUTOCONFIRM=true


############
# Studio - Configuration for the Dashboard
############

STUDIO_DEFAULT_ORGANIZATION=Default Organization
STUDIO_DEFAULT_PROJECT=Default Project

STUDIO_PORT=3000
# Public URL for Supabase
SUPABASE_PUBLIC_URL=${PROTOCOL}://supabase.${BASE_DOMAIN}

# Enable webp support
IMGPROXY_ENABLE_WEBP_DETECTION=true

# Add your OpenAI API key to enable SQL Editor Assistant
OPENAI_API_KEY=

# Anthropic API key for Claude integration in Open WebUI
ANTHROPIC_API_KEY=

# Open WebUI Security Keys (generate new ones for production!)
# Generate with: openssl rand -hex 32
JWT_SECRET_KEY=your-jwt-secret-change-me
SESSION_SECRET=your-session-secret-change-me
WEBUI_SECRET_KEY=your-secret-key-change-me


############
# Functions - Configuration for Functions
############
# NOTE: VERIFY_JWT applies to all functions. Per-function VERIFY_JWT is not supported yet.
FUNCTIONS_VERIFY_JWT=false


############
# Logs - Configuration for Analytics
# Please refer to https://supabase.com/docs/reference/self-hosting-analytics/introduction
############

# Change vector.toml sinks to reflect this change
# these cannot be the same value
LOGFLARE_PUBLIC_ACCESS_TOKEN=your-super-secret-and-long-logflare-key-public
LOGFLARE_PRIVATE_ACCESS_TOKEN=your-super-secret-and-long-logflare-key-private

# Docker socket location - this value will differ depending on your OS
DOCKER_SOCKET_LOCATION=/var/run/docker.sock

# Google Cloud Project details
GOOGLE_PROJECT_ID=GOOGLE_PROJECT_ID
GOOGLE_PROJECT_NUMBER=GOOGLE_PROJECT_NUMBER

############
# Google Cloud Setup Automation
# Used by scripts/setup-google-client.js for automating client onboarding
############
# Service account key JSON (must have Owner or Editor role)
# Get this from Google Cloud Console > IAM & Admin > Service Accounts
GOOGLE_SERVICE_ACCOUNT_KEY={"type":"service_account","project_id":"your-project","private_key_id":"key-id","private_key":"-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n","client_email":"service-account@project.iam.gserviceaccount.com","client_id":"123456789","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url":"https://www.googleapis.com/robot/v1/metadata/x509/service-account%40project.iam.gserviceaccount.com"}

# Billing account ID for new projects (format: XXXXXX-XXXXXX-XXXXXX)
GOOGLE_BILLING_ACCOUNT_ID=your-billing-account-id

# Default prefix for project IDs
DEFAULT_PROJECT_PREFIX=client-n8n

# N8N API configuration for credential injection
N8N_API_URL=http://n8n:5678
N8N_API_KEY=your-n8n-api-key-if-configured
